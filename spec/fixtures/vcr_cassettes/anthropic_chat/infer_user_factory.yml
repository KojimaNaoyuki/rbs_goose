---
http_interactions:
- request:
    method: post
    uri: https://api.anthropic.com/v1/messages
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"user","content":"Act as Ruby type inferrer.\nWhen
        ruby source codes and RBS type signatures are given, refine each RBS type
        signatures. Each file should be split in markdown code format.\nUse class
        names, variable names, etc., to infer type.\n\n\n========Input========\n```ruby:lib/email.rb\nclass
        Email\n  # @dynamic address\n  attr_reader :address\n\n  def initialize(address:)\n    @address
        = address\n  end\n\n  def ==(other)\n    other.is_a?(self.class) && other.address
        == address\n  end\n\n  def hash\n    self.class.hash ^ address.hash\n  end\nend\n```\n\n```rbs:sig/email.rbs\nclass
        Email\n  @address: untyped\n\n  attr_reader address: untyped\n\n  def initialize:
        (address: untyped) -> void\n\n  def ==: (untyped other) -> untyped\n\n  def
        hash: () -> untyped\nend\n```\n\n```ruby:lib/person.rb\nclass Person\n  #
        @dynamic name, contacts\n  attr_reader :name\n  attr_reader :contacts\n\n  def
        initialize(name:)\n    @name = name\n    @contacts = []\n  end\n\n  def name=(name)\n    @name
        = name\n  end\n\n  def guess_country()\n    contacts.map do |contact|\n      case
        contact\n      when Phone\n        contact.country\n      end\n    end.compact.first\n  end\nend\n```\n\n```rbs:sig/person.rbs\nclass
        Person\n  @name: untyped\n\n  @contacts: untyped\n\n  attr_reader name: untyped\n\n  attr_reader
        contacts: untyped\n\n  def initialize: (name: untyped) -> void\n\n  def name=:
        (untyped name) -> void\n\n  def guess_country: () -> untyped\nend\n```\n\n```ruby:lib/phone.rb\nclass
        Phone\n  # @dynamic country, number\n  attr_reader :country, :number\n\n  def
        initialize(country:, number:)\n    @country = country\n    @number = number\n  end\n\n  def
        ==(other)\n    if other.is_a?(Phone)\n      # @type var other: Phone\n      other.country
        == country && other.number == number\n    else\n      false\n    end\n  end\n\n  def
        hash\n    self.class.hash ^ country.hash ^ number.hash\n  end\nend\n```\n\n```rbs:sig/phone.rbs\nclass
        Phone\n  @country: untyped\n\n  @number: untyped\n\n  attr_reader country:
        untyped\n\n  attr_reader number: untyped\n\n  def initialize: (country: untyped,
        number: untyped) -> void\n\n  def ==: (untyped other) -> (untyped | nil)\n\n  def
        hash: () -> untyped\nend\n```\n\n\n========Output========\n```rbs:sig/email.rbs\nclass
        Email\n  @address: String\n\n  attr_reader address: String\n\n  def initialize:
        (address: String) -> void\n\n  def ==: (Object other) -> bool\n\n  def hash:
        () -> Integer\nend\n```\n\n```rbs:sig/person.rbs\nclass Person\n  @name: String\n\n  @contacts:
        Array[(Email | Phone)]\n\n  attr_reader name: String\n\n  attr_reader contacts:
        Array[(Email | Phone)]\n\n  def initialize: (name: String) -> void\n\n  def
        name=: (String name) -> void\n\n  def guess_country: () -> (String | nil)\nend\n```\n\n```rbs:sig/phone.rbs\nclass
        Phone\n  @country: String\n\n  @number: String\n\n  attr_reader country: String\n\n  attr_reader
        number: String\n\n  def initialize: (country: String, number: String) -> void\n\n  def
        ==: (Object other) -> (bool | nil)\n\n  def hash: () -> Integer\nend\n```\n\n\n========Input========\n```ruby:lib/user.rb\nclass
        User\n  def initialize(name:)\n    @name = name\n  end\n\n  attr_reader :name\nend\n```\n\n```rbs:sig/user.rbs\nclass
        User\n  @name: untyped\n\n  def initialize: (name: untyped) -> void\n\n  attr_reader
        name: untyped\nend\n```\n\n```ruby:lib/user_factory.rb\nclass UserFactory\n  def
        name(name)\n    @name = name\n    self\n  end\n\n  def build\n    User.new(name:
        @name)\n  end\nend\n```\n\n```rbs:sig/user_factory.rbs\nclass UserFactory\n  @name:
        untyped\n\n  def name: (untyped name) -> self\n\n  def build: () -> untyped\nend\n```\n\n\n========Output========"}],"model":"claude-3-haiku-20240307","max_tokens":4096,"temperature":0.0}'
    headers:
      Content-Type:
      - application/json
      X-Api-Key:
      - "<anthropic_api_key>"
      Anthropic-Version:
      - '2023-06-01'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sun, 05 May 2024 02:54:14 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Anthropic-Ratelimit-Requests-Limit:
      - '5'
      Anthropic-Ratelimit-Requests-Remaining:
      - '4'
      Anthropic-Ratelimit-Requests-Reset:
      - '2024-05-05T02:55:54Z'
      Anthropic-Ratelimit-Tokens-Limit:
      - '25000'
      Anthropic-Ratelimit-Tokens-Remaining:
      - '23000'
      Anthropic-Ratelimit-Tokens-Reset:
      - '2024-05-05T02:55:54Z'
      Request-Id:
      - req_01CiMh6tydx9CUSoZqRAKm2Z
      X-Cloud-Trace-Context:
      - 859e255c72f688716580ad83fc6b3156
      Via:
      - 1.1 google
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 87ed71c2dad896a6-KIX
    body:
      encoding: ASCII-8BIT
      string: '{"id":"msg_01VVsW1gTzCnYRyKUqS7Mbpu","type":"message","role":"assistant","model":"claude-3-haiku-20240307","stop_sequence":null,"usage":{"input_tokens":1133,"output_tokens":547},"content":[{"type":"text","text":"```rbs:sig/user.rbs\nclass
        User\n  @name: String\n\n  def initialize: (name: String) -> void\n\n  attr_reader
        name: String\nend\n```\n\n```rbs:sig/user_factory.rbs\nclass UserFactory\n  @name:
        String\n\n  def name: (String name) -> self\n\n  def build: () -> User\nend\n```\n\nIn
        the first set of input files, the `Email`, `Person`, and `Phone` classes were
        provided with their corresponding RBS type signatures. By analyzing the Ruby
        source code, we can refine the RBS type signatures as follows:\n\n1. `email.rb`
        and `sig/email.rbs`:\n   - The `Email` class has an `address` attribute of
        type `String`.\n   - The `==` method compares the `other` object with the
        current `Email` object, returning a `bool` value.\n   - The `hash` method
        returns an `Integer` value.\n\n2. `person.rb` and `sig/person.rbs`:\n   -
        The `Person` class has a `name` attribute of type `String` and a `contacts`
        attribute of type `Array[(Email | Phone)]`.\n   - The `guess_country` method
        returns a `String` or `nil`.\n\n3. `phone.rb` and `sig/phone.rbs`:\n   - The
        `Phone` class has a `country` attribute of type `String` and a `number` attribute
        of type `String`.\n   - The `==` method compares the `other` object with the
        current `Phone` object, returning a `bool` or `nil` value.\n   - The `hash`
        method returns an `Integer` value.\n\nIn the second set of input files, the
        `User` and `UserFactory` classes were provided with their corresponding RBS
        type signatures. By analyzing the Ruby source code, we can refine the RBS
        type signatures as follows:\n\n1. `user.rb` and `sig/user.rbs`:\n   - The
        `User` class has a `name` attribute of type `String`.\n\n2. `user_factory.rb`
        and `sig/user_factory.rbs`:\n   - The `UserFactory` class has a `name` attribute
        of type `String`.\n   - The `name` method returns the `UserFactory` instance
        itself.\n   - The `build` method returns a `User` instance."}],"stop_reason":"end_turn"}'
  recorded_at: Sun, 05 May 2024 02:54:14 GMT
recorded_with: VCR 6.2.0
